{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHEIKH IBRAHIM\\\\Downloads\\\\autohaven\\\\autohaven\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n    if (userInfo) {\n      setCurrentUser(userInfo);\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Get users from local storage or use empty array if none exist\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n\n      // Find user with matching email and password\n      const user = users.find(u => u.email === email);\n      if (user && user.password === password) {\n        // Create user data without password for security\n        const userData = {\n          id: user.id,\n          name: user.name,\n          email: user.email\n        };\n        localStorage.setItem('userInfo', JSON.stringify(userData));\n        setCurrentUser(userData);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid email or password'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to login'\n      };\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      // Get existing users or initialize empty array\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n\n      // Check if email is already registered\n      if (users.some(user => user.email === email)) {\n        return {\n          success: false,\n          error: 'Email is already registered'\n        };\n      }\n\n      // Create new user with unique ID\n      const newUser = {\n        id: Date.now().toString(),\n        name,\n        email,\n        password // In a real app, this would be hashed\n      };\n\n      // Add to users array and save to localStorage\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // Create user data without password for security\n      const userData = {\n        id: newUser.id,\n        name: newUser.name,\n        email: newUser.email\n      };\n      localStorage.setItem('userInfo', JSON.stringify(userData));\n      setCurrentUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to register'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('userInfo');\n    setCurrentUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      login,\n      register,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","userInfo","JSON","parse","localStorage","getItem","login","email","password","users","user","find","u","userData","id","name","setItem","stringify","success","error","register","some","newUser","Date","now","toString","push","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SHEIKH IBRAHIM/Downloads/autohaven/autohaven/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n    if (userInfo) {\n      setCurrentUser(userInfo);\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      // Get users from local storage or use empty array if none exist\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n      \n      // Find user with matching email and password\n      const user = users.find(u => u.email === email);\n      \n      if (user && user.password === password) {\n        // Create user data without password for security\n        const userData = { id: user.id, name: user.name, email: user.email };\n        localStorage.setItem('userInfo', JSON.stringify(userData));\n        setCurrentUser(userData);\n        return { success: true };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid email or password',\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to login',\n      };\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      // Get existing users or initialize empty array\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n      \n      // Check if email is already registered\n      if (users.some(user => user.email === email)) {\n        return {\n          success: false,\n          error: 'Email is already registered',\n        };\n      }\n      \n      // Create new user with unique ID\n      const newUser = {\n        id: Date.now().toString(),\n        name,\n        email,\n        password, // In a real app, this would be hashed\n      };\n      \n      // Add to users array and save to localStorage\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n      \n      // Create user data without password for security\n      const userData = { id: newUser.id, name: newUser.name, email: newUser.email };\n      localStorage.setItem('userInfo', JSON.stringify(userData));\n      setCurrentUser(userData);\n      \n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to register',\n      };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('userInfo');\n    setCurrentUser(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        login,\n        register,\n        logout,\n        loading,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMY,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC7D,IAAIJ,QAAQ,EAAE;MACZH,cAAc,CAACG,QAAQ,CAAC;IAC1B;IACAD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF;MACA,MAAMC,KAAK,GAAGP,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;;MAE7D;MACA,MAAMK,IAAI,GAAGD,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,KAAK,KAAKA,KAAK,CAAC;MAE/C,IAAIG,IAAI,IAAIA,IAAI,CAACF,QAAQ,KAAKA,QAAQ,EAAE;QACtC;QACA,MAAMK,QAAQ,GAAG;UAAEC,EAAE,EAAEJ,IAAI,CAACI,EAAE;UAAEC,IAAI,EAAEL,IAAI,CAACK,IAAI;UAAER,KAAK,EAAEG,IAAI,CAACH;QAAM,CAAC;QACpEH,YAAY,CAACY,OAAO,CAAC,UAAU,EAAEd,IAAI,CAACe,SAAS,CAACJ,QAAQ,CAAC,CAAC;QAC1Df,cAAc,CAACe,QAAQ,CAAC;QACxB,OAAO;UAAEK,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,OAAO;UACLA,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC;MACH;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QACLD,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAAA,CAAOL,IAAI,EAAER,KAAK,EAAEC,QAAQ,KAAK;IAChD,IAAI;MACF;MACA,MAAMC,KAAK,GAAGP,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;;MAE7D;MACA,IAAII,KAAK,CAACY,IAAI,CAACX,IAAI,IAAIA,IAAI,CAACH,KAAK,KAAKA,KAAK,CAAC,EAAE;QAC5C,OAAO;UACLW,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC;MACH;;MAEA;MACA,MAAMG,OAAO,GAAG;QACdR,EAAE,EAAES,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBV,IAAI;QACJR,KAAK;QACLC,QAAQ,CAAE;MACZ,CAAC;;MAED;MACAC,KAAK,CAACiB,IAAI,CAACJ,OAAO,CAAC;MACnBlB,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEd,IAAI,CAACe,SAAS,CAACR,KAAK,CAAC,CAAC;;MAEpD;MACA,MAAMI,QAAQ,GAAG;QAAEC,EAAE,EAAEQ,OAAO,CAACR,EAAE;QAAEC,IAAI,EAAEO,OAAO,CAACP,IAAI;QAAER,KAAK,EAAEe,OAAO,CAACf;MAAM,CAAC;MAC7EH,YAAY,CAACY,OAAO,CAAC,UAAU,EAAEd,IAAI,CAACe,SAAS,CAACJ,QAAQ,CAAC,CAAC;MAC1Df,cAAc,CAACe,QAAQ,CAAC;MAExB,OAAO;QAAEK,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLD,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH;EACF,CAAC;EAED,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnBvB,YAAY,CAACwB,UAAU,CAAC,UAAU,CAAC;IACnC9B,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACoC,QAAQ;IACnBC,KAAK,EAAE;MACLjC,WAAW;MACXS,KAAK;MACLc,QAAQ;MACRO,MAAM;MACN5B;IACF,CAAE;IAAAJ,QAAA,EAEDA;EAAQ;IAAAoC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACtC,EAAA,CAjGWF,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}